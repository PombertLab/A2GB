#!/usr/bin/perl
## Pombert Lab, IIT, 2020
my $name = 'ApolloGFF3toEMBL.pl';
my $version = '4.1e';
my $updated = '2021-05-27';

use strict;
use warnings;
use File::Basename;
use Bio::SeqIO;
use Getopt::Long qw(GetOptions);

my $usage = <<"OPTIONS";
NAME		${name}
VERSION		${version}
UPDATED		${updated}
SYNOPSIS	Converts Apollo GFF3 files to EMBL files and writes the proteins and RNAs 
		to separate FASTA files with the .prot and .RNA extensions. Generates
		locus tags automatically based on the provided prefix.

REQUIREMENTS	BioPerl's Bio::SeqIO module
NOTE		The GFF3 (*.gff3) and corresponding FASTA (*.fsa) files must be in the same folder.

USAGE		${name} \\
		  -p LOCUS_TAG_PREFIX \\
		  -g *.gff3 \\
		  -o OUTDIR \\
		  -f features.list \\
		  -z 5 \\
		  -x \\
		  -i \\
		  -r 'rRNA:deep pink' 'tRNA:blue violet' \\
		  -c 1

OPTIONS:
-p (--prefix)	locus_tag prefix
-g (--gff)	GFF3 files generated by Apollo
-o (--outdir)	Output directory [Default: ./]
-f (--features)	Generate a tab-delimited list of features [Default: features.list]
-z (--zeroes)	Number of padding zeroes for locus tags [Default: 5]
-x (--exon)	Create exon features for genes with introns
-i (--intron)	Create intron features
-r (--rgb)	Change default colors of EMBL features for Artemis
-l (--lcolors)	Display a list of possible RGB colors
-c (--gcode)	NCBI genetic code [Default: 1]
		1  - The Standard Code
		2  - The Vertebrate Mitochondrial Code
		3  - The Yeast Mitochondrial Code
		4  - The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code
		11 - The Bacterial, Archaeal and Plant Plastid Code
		# For complete list; see https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi
OPTIONS
die "\n$usage\n" unless @ARGV;

my $locus_tag_prefix;
my @gff3;
my $outdir = './';
my $featlist = 'features.list';
my $zeroes = 5;
my $exon_feature;
my $intron_feature;
my @RGB;
my $list_RGB;
my $gc = 1;
GetOptions(
	'p|prefix=s' => \$locus_tag_prefix,
	'g|gff=s@{1,}' => \@gff3,
	'o|outdir=s' => \$outdir,
	'f|features=s' => \$featlist,
	'z|zeroes=i' => \$zeroes,
	'x|exon' => \$exon_feature,
	'i|intron' => \$intron_feature,
	'r|rgb=s@{1,}' => \@RGB,
	'l|lcolors' => \$list_RGB,
	'c|gcode=i' => \$gc
);

### Setting up colours for EMBL files
my %RGB_colours;
fill_RGB_colors();

# Print possible colors if requested
if ($list_RGB){
	my @colors = sort (keys %RGB_colours);
	my $text = (sprintf "%-23s", 'Color');
	print "\n\# ${text}RGB value\n";
	foreach my $color (@colors){
		my $formatted_color = (sprintf "%-25s", $color);
		print "${formatted_color}$RGB_colours{$color}\n";
	}
	print "\nFor a visual list of RGB colors, see: https://www.rapidtables.com/web/color/RGB_Color.html\n\n";
exit;
}

# Setting up default colors
my %feature_colours = (
	'gene' => 'white',
	'CDS' => 'cyan',
	'rRNA' => 'orange', ## Artemis defaults to white, which is hard to see next to gene features
	'tRNA' => 'pale green',
	'tmRNA' => 'lime',
	'ncRNA' => 'blue violet', ## for visibility
	'snRNA' => 'deep pink', ## for visibility
	'snoRNA' => 'hot pink', ## for visibility
	'exon' => 'yellow',
	'intron' => 'dark gray' ## lighter gray, to be able to read the bases underneath the features
);

# Changing colors if requested
if (@RGB){
	foreach my $color_change (@RGB){
		my ($feature, $color) = split (";|:", $color_change);
		$color = lc($color);
		if (exists $RGB_colours{$color}){
			$feature_colours{$feature} = $color;
		}
		else{
			print "\nERROR: unrecognized RGB color: $color\n";
			print "Type -l to display a list of possible RGB colors...\n\n";
			exit;
		}
	}
}

## Checking for mandatory command line switches
unless (@gff3){
	print "\nMISSING GFF3: Please enter at least one .gff3 file with -g\n\n";
	exit;
}

unless ($locus_tag_prefix){
	print "\nMISSING PREFIX: Please enter a locus tag prefix with -p\n\n";
	exit;
}

### Creating output directory
unless (-d $outdir){
	mkdir ($outdir,0755) or die "Can't create folder $outdir: $!\n";
}
print "\nSetting output directory to: $outdir\n\n";

### Loading NCBI genetic codes
my %gcodes;
gcodes();

### Creating list of features + its header
my $list_file = "${outdir}/$featlist";
open FEAT, ">", "$list_file" or die "Can't create feature list $list_file: $!\n";
print FEAT '#Locus_tag'."\t"."location"."\t"."Type"."\t"."Strand"."\t"."Start"."\t"."End"."\n";

### Calculating number of files to adjust locus_tag padding with zeroes automatically
my $numfiles = scalar(@gff3);
my $width = length $numfiles;

### Declaring variables
my $locus_id = 10;
my $contig_number = 0;

my $protein;
my $mRNA;
my $locus_tag;
my $exon_counter;
my $intron_counter;

my %feature;
my $list;
my $gff;
my $dir;

### Parsing GFF3
while (my $file = shift@gff3){

	($gff, $dir) = fileparse($file);
	my $loc = $gff;
	$loc =~ s/.gff3$//;

	## inputs
	print "Working on file $gff located in $dir\n";
	open IN, "<", "$file" or die "Can't read $file: $!\n";
	$file =~ s/.gff3$//;
	open DNA, "<", "$file.fsa" or die "Can't read $file.fsa: $!\n";

	## outputs
	my $embl_file = "${outdir}/$file.embl";
	my $prot_file = "${outdir}/$file.prot";
	my $RNA_file = "${outdir}/$file.RNA";
	my $exon_file = "${outdir}/$file.exons";
	my $intron_file = "${outdir}/$file.introns";

	open EMBL, ">", "$embl_file" or die "Can't create $embl_file: $!\n";
	open PROT, ">", "$prot_file" or die "Can't create $prot_file: $!\n";
	open MRNA, ">", "$RNA_file" or die "Can't create $RNA_file: $!\n";
	if ($exon_feature){
		open EXON, ">", "$exon_file" or die "Can't create $exon_file: $!\n";
	}
	if ($intron_feature){
		open INTRON, ">", "$intron_file" or die "Can't create $intron_file: $!\n";
	}

	if ($file =~ /(\d+)$/){ $contig_number = $1; }
	
	### Creating a single DNA string for protein translation
	my $DNAseq = undef;
	while (my $dna = <DNA>){
		chomp $dna;
		if ($dna =~ /^>/){ next; }
		else{ $DNAseq .= $dna; }
	}

	## Changing to upper case to fit with the translation hash + calculating the contig size
	my $DNAsequence = uc($DNAseq);
	my $contig_length = length($DNAsequence);
	
	## Printing short EMBL headers
	my $timestamp = localtime();
	print EMBL "ID   ${file}; genomic DNA; ${contig_length} bp\n";
	print EMBL "XX\n";
	print EMBL "DE   Generated on ${timestamp} by ${name} version ${version}\n";
	print EMBL "XX\n";

	### Init hashes, arrays and values
	my $geneid = 0;
	my $CDS_counter = 0;
	my %gene = ();
	my %exon = ();
	my %strands = ();
	my @todo = ();
	
	%feature = (); ## Removing features from the previous file.

	### Filling the hashes and arrays ###
	while (my $line = <IN>){
		chomp $line;
		if ($line =~ /^\S+\t\S+\tgene\t(\d+)\t(\d+)\t\S+\t([-+])/){
			my $start = $1;
			my $end = $2;
			my $strandedness = $3;
			$geneid = $start;
			push (@{$gene{$geneid}}, $start, $end);
			push (@todo, $geneid);
			$strands{$geneid} = $strandedness;
			$CDS_counter = 0;
		}
		elsif ($line =~ /^\S+\t\S+\t(CDS|rRNA|tRNA|tmRNA|ncRNA|snRNA|snoRNA)\t(\d+)\t(\d+)\t\S+\t([-+])\t(\d|\.)/){
			my $type = $1;
			my $start = $2;
			my $end = $3;
			my $strandedness = $4;
			my $phase = $5; ## 0,1,2 (CDS) or . for RNAs
			$feature{$geneid} = $type;
			if ($strandedness eq '+'){
				push (@{$exon{$geneid}}, $start, $end);
				$CDS_counter++;
			}
			elsif ($strandedness eq '-'){
				push (@{$exon{$geneid}}, $end, $start);
				$CDS_counter++;
			}
		}
	}
	
	### Working on the gene list. Using the @todo array so that we don't have to sort the hash ouput ###
	my @sorted_todo = sort {$a <=> $b} @todo;
	while ($list = shift@sorted_todo){
		if ($strands{$list} eq '+'){ ## Looking for positive strandedness
			
			### Working on gene features
			my $locus_number = sprintf("%0${zeroes}d", $locus_id);
			my $contig = sprintf("%0${width}d", $contig_number);

			## Defining locus tag for readability
			$locus_tag = "$locus_tag_prefix".'_'."$contig".'g'."$locus_number";

			print FEAT "$locus_tag"."\t"."$loc"."\t"."$feature{$list}";
			print FEAT "\t".'+'."\t"."$gene{$list}[0]"."\t"."$gene{$list}[1]"."\n";
			print EMBL 'FT   gene            '."$gene{$list}[0]".'..'."$gene{$list}[1]"."\n";
			print EMBL 'FT                   /locus_tag="'."$locus_tag".'"'."\n";

			$locus_id += 10;

			colour_features('gene');

			### Working on CDS features
			my $cds_count = scalar(@{$exon{$list}});
			my $end = ($cds_count - 1);
			my $num = ($cds_count - 2);
			my $stopcodon = $exon{$list}[$end];
			
			if (scalar(@{$exon{$list}}) == 2){ ## Verifying if we have a single exon

				print EMBL 'FT   '."$feature{$list}".'             '."$exon{$list}[0]..$stopcodon\n";
				print EMBL 'FT                   /locus_tag="'."$locus_tag".'"'."\n";
				colour_features($feature{$list});

				my $start = (($exon{$list}[0]));
				my $stop = (($exon{$list}[1]));

				$mRNA = substr($DNAsequence, $start-1, $stop - $start + 1);
				sequence($mRNA, \*MRNA);

				if ($feature{$list} eq 'CDS'){
					translate($mRNA);
					sequence($protein, \*PROT);
					unless ($gc == 1) { print EMBL 'FT                   /transl_table='."$gc"."\n"; }
				}
			}
			elsif (scalar(@{$exon{$list}}) > 2){ ## Verifying if we have more than one exon

				## Creating exon features + saving introns to .exons files
				if ($exon_feature){
					$exon_counter = 0;
					for (my $i = 0; $i < $#{$exon{$list}}; $i += 2){
						$exon_counter++;
						my $exon_5_prime = $exon{$list}[$i];
						my $exon_3_prime = $exon{$list}[$i + 1];
						print EMBL 'FT   '.'exon'.'             '."$exon_5_prime..$exon_3_prime\n";
					}
				}

				## Creating intron features + saving introns to .introns files
				if ($intron_feature){
					$intron_counter = 0;
					for (my $i = 1; $i < $#{$exon{$list}}; $i += 2){
						my $intron_5_prime = $exon{$list}[$i] + 1;
						my $intron_3_prime = $exon{$list}[$i + 1] - 1;
						$intron_counter++;
						print EMBL 'FT   '.'intron'.'           '."$intron_5_prime..$intron_3_prime\n";
						print EMBL 'FT                   /note="'."Intron # $intron_counter from $locus_tag".'"'."\n";
						colour_features('intron');

						my $intron = substr($DNAsequence, $intron_5_prime - 1, ($intron_3_prime - $intron_5_prime + 1));
						sequence($intron, \*INTRON);
					}
				}

				## Creating EMBL features
				print EMBL 'FT   '."$feature{$list}".'             '."join($exon{$list}[0]..";

				foreach my $count (1..$num){
					if ($count % 2){ # Working on odd numbers
						print EMBL "$exon{$list}[$count],";
					}
					else{ # Working on even numbers
						print EMBL "$exon{$list}[$count]..";
					}
				}

				print EMBL "$stopcodon)\n";
				print EMBL 'FT                   /locus_tag="'."$locus_tag".'"'."\n";

				colour_features($feature{$list});

				$mRNA = undef;
				my $tmp1 = undef;
				my $tmp2 = undef;
				foreach my $subs (0..$end){
					if ($subs % 2){ # Working on odd numbers
						$tmp2 = $exon{$list}[$subs] - 1;
						$mRNA .= substr($DNAsequence, $tmp1, $tmp2 - $tmp1 + 1);
					}
					else{ # Working on even numbers
						$tmp1 = $exon{$list}[$subs] - 1;
					}
				}
				sequence($mRNA, \*MRNA);

				if ($feature{$list} eq 'CDS'){
					translate($mRNA);
					sequence($protein, \*PROT);
					unless ($gc == 1) { print EMBL 'FT                   /transl_table='."$gc"."\n"; }
				}
			}
		}
		if ($strands{$list} eq '-'){ ## Looking for negative strandedness
			
			### Working on gene features
			my $locus_number = sprintf("%0${zeroes}d", $locus_id);
			my $contig = sprintf("%0${width}d", $contig_number);

			## Defining locus tag for readability
			$locus_tag = "$locus_tag_prefix".'_'."$contig".'g'."$locus_number";

			print FEAT "$locus_tag"."\t"."$loc"."\t";
			print FEAT "$feature{$list}"."\t".'-'."\t"."$gene{$list}[0]"."\t"."$gene{$list}[1]"."\n";
			print EMBL 'FT   gene            complement('."$gene{$list}[0]".'..'."$gene{$list}[1]".')'."\n";
			print EMBL 'FT                   /locus_tag="'."$locus_tag".'"'."\n";

			colour_features('gene');

			$locus_id += 10;
				
			### Working on CDS features
			my $cds_count = scalar(@{$exon{$list}});
			my $end = $cds_count - 1;
			my $num = $cds_count - 2;
			my @reversed = reverse(@{$exon{$list}}); ## Reversing the list of exons
			my $stopcodon = $reversed[$end];
			
			if (scalar(@reversed) == 2){ ## Verifying if we have a single exon
				print EMBL 'FT   '."$feature{$list}".'             complement('."$reversed[0]..$reversed[1]".')'."\n";
				print EMBL 'FT                   /locus_tag="'."$locus_tag".'"'."\n";
				
				colour_features($feature{$list});

				my $start = $reversed[0];
				my $stop = $reversed[1];

				$mRNA = substr($DNAsequence, $start - 1, $stop - $start + 1);
				reverse_complement($mRNA);
				sequence($mRNA, \*MRNA);

				if ($feature{$list} eq 'CDS'){
					translate($mRNA);
					sequence($protein, \*PROT);
					unless ($gc == 1) { print EMBL 'FT                   /transl_table='."$gc"."\n"; }
				}
			}
			elsif (scalar(@reversed) > 2){ ## Verifying if we have more than one exon

				## Creating exon features + saving introns to .exons files
				if ($exon_feature){
					$exon_counter = (scalar(@reversed)) / 2;
					for (my $i = 0; $i < $#reversed; $i += 2){
						my $exon_5_prime = $reversed[$i + 1];
						my $exon_3_prime = $reversed[$i];
						print EMBL 'FT   '.'exon'.'            complement('."$exon_3_prime..$exon_5_prime".')'."\n";
						print EMBL 'FT                   /note="'."Exon # $exon_counter from $locus_tag".'"'."\n";
						colour_features('exon');

						my $exon =  substr($DNAsequence, $exon_3_prime - 1, $exon_5_prime - $exon_3_prime + 1);
						reverse_complement($exon);
						sequence($exon, \*EXON);

						$exon_counter--;
					}
				}

				## Creating intron features + saving introns to .introns files
				if ($intron_feature){
					$intron_counter = ((scalar(@reversed))/2) - 1;
					for (my $i = 1; $i < $#reversed; $i += 2){
						my $intron_5_prime = $reversed[$i] + 1;
						my $intron_3_prime = $reversed[$i + 1] - 1;
						print EMBL 'FT   '.'intron'.'          complement('."$intron_3_prime..$intron_5_prime".')'."\n";
						print EMBL 'FT                   /note="'."Intron # $intron_counter from $locus_tag".'"'."\n";
						colour_features('intron');

						my $intron =  substr($DNAsequence, $intron_5_prime - 1, $intron_3_prime - $intron_5_prime + 1);
						reverse_complement($intron);
						sequence($intron, \*INTRON);

						$intron_counter--;
					}
				}

				## Creating EMBL features
				print EMBL 'FT   '."$feature{$list}".'             complement('."join($reversed[0]..";

				foreach my $count (1..$num){
					if ($count % 2){ # Working on odd numbers
						print EMBL "$reversed[$count],";
					}
					else{ # Working on even numbers
						print EMBL "$reversed[$count]..";
					}
				}
				print EMBL "$stopcodon)\n";
				print EMBL 'FT                   /locus_tag="'."$locus_tag".'"'."\n";

				colour_features($feature{$list});

				$mRNA = undef;
				my $tmp1 = undef;
				my $tmp2 = undef;
				foreach my $subs (0..$end){
					if ($subs % 2){ # Working on odd numbers
						$tmp2 = $reversed[$subs] - 1;
						$mRNA .= substr($DNAsequence, $tmp1, $tmp2 - $tmp1 + 1);
					}
					else{ # Working on even numbers
						$tmp1 = $reversed[$subs] - 1;
					}
				}

				reverse_complement($mRNA);
				sequence($mRNA, \*MRNA);

				if ($feature{$list} eq 'CDS'){
					translate($mRNA);
					sequence($protein, \*PROT);
					unless ($gc == 1) { print EMBL 'FT                   /transl_table='."$gc"."\n"; }
				}
			}
		}
	}

	### Converting Fasta input to EMBL with BioPerl SeqIO
	my $in = Bio::SeqIO->new(-file => "$file.fsa", -format => "fasta");
	my $out = Bio::SeqIO->new(-file => ">$file.tmp1", -format => "embl");
	while (my $seq = $in->next_seq()){
		$out->write_seq($seq);
	}

	### Adding formatted sequence to the EMBL file
	open SEQ, "<", "$file.tmp1" or die "Can't read file $file.tmp1: $!\n";
	while (my $read = <SEQ>){
		if ($read =~ /^AC|ID|XX|DE|FH/){ next; }
		else{ print EMBL "$read" };
	}
	close SEQ;
}

### Clean up
close IN;
close EMBL;
system "rm ${dir}/*.tmp1";

## Subroutines
sub reverse_complement {
	$_[0] = reverse($_[0]);
	$_[0] =~ tr/ATGCRYSWKMBDHVatgcryswkmbdhv/TACGYRWSMKVHDBtacgyrwsmkvhdb/;
}

sub translate {
	my $seq = $_[0];
	$protein = undef;
	for(my $i = 0; $i < (length($seq) - 5); $i += 3){ ## -2 if stop codon (*) desired, -5 if not
		my $codon = substr($seq, $i, 3);
		$protein .=  $gcodes{$gc}{$codon};
	}
}

sub sequence {
	my ($sequence, $fh) = @_;
	my $length = length $sequence;
	my $header = $locus_tag;
	
	## Changing units if proteins
	my $unit;
	if ($fh eq \*PROT) { $unit = 'aa'; }
	else { $unit = 'bp' ;}

	## Changing header if exon or intron
	if ($fh eq \*EXON) {
		$header = "$locus_tag".'_exon_#'."$exon_counter";
	}
	if ($fh eq \*INTRON) {
		$header = "$locus_tag".'_intron_#'."$intron_counter";
	}

	print $fh ">$header \[length=$length $unit\]\n";
	
	my @SEQUENCE = unpack ("(A60)*", $sequence);
	while (my $seq = shift@SEQUENCE){
		print $fh "$seq\n";
	}
}

sub colour_features {
	my $feature = $_[0];
	my $feat_color = $feature_colours{$feature};
	my $rgb_range = $RGB_colours{$feat_color};
	print EMBL 'FT                   /colour=';
	print EMBL "$rgb_range";
	print EMBL "\n";
}

sub fill_RGB_colors {
	%RGB_colours = ( ## https://www.rapidtables.com/web/color/RGB_Color.html
		'alice blue' => '240 248 255',
		'antique white' => '250 235 215',
		'aqua' => '0 255 255',
		'aqua marine' => '127 255 212',
		'azure' => '240 255 255',
		'beige' => '245 245 220',
		'bisque' => '255 228 196',
		'black' => '0 0 0',
		'blanched almond' => '255 235 205',
		'blue' => '0 0 255',
		'blue violet' => '138 43 226',
		'brown' => '165 42 42',
		'burly wood' => '222 184 135',
		'cadet blue' => '95 158 160',
		'chart reuse' => '127 255 0',
		'chocolate' => '210 105 30',
		'coral' => '255 127 80',
		'corn flower blue' => '100 149 237',
		'corn silk' => '255 248 220',
		'crimson' => '220 20 60',
		'cyan' => '0 255 255',
		'dark blue' => '0 0 139',
		'dark cyan' => '0 139 139',
		'dark golden rod' => '184 134 11',
		'dark gray' => '169 169 169',
		'dark grey' => '169 169 169',
		'dark green' => '0 100 0',
		'dark khaki' => '189 183 107',
		'dark magenta' => '139 0 139',
		'dark olive green' => '85 107 47',
		'dark orange' => '255 140 0',
		'dark orchid' => '153 50 204',
		'dark red' => '139 0 0',
		'dark salmon' => '233 150 122',
		'dark sea green' => '143 188 143',
		'dark slate blue' => '72 61 139',
		'dark slate gray' => '47 79 79',
		'dark turquoise' => '64 206 209',
		'dark violet' => '148 0 211',
		'deep pink' => '255 20 147',
		'deep sky blue' => '0 191 255',
		'dim gray' => '105 105 105',
		'dim grey' => '105 105 105',
		'dodger blue' => '30 144 255',
		'firebrick' => '178 34 34',
		'floral white' => '255 250 240',
		'forest green' => '34 139 34',
		'fuchsia' => '255 0 255',
		'gainsboro' => '220 220 220',
		'ghost white' => '248 248 255',
		'gold' => '255 215 0',
		'golden rod' => '218 165 32',
		'gray' => '128 128 128',
		'grey' => '128 128 128',
		'green' => '0 128 0',
		'green yellow' => '173 255 47',
		'honeydew' => '240 255 240',
		'hot pink' => '255 105 180',
		'indian red' => '205 92 92',
		'indigo' => '75 0 130',
		'ivory' => '255 255 240',
		'khaki' => '240 230 140',
		'lavender' => '230 230 250',
		'lavender blush' => '255 240 245',
		'lawn green' => '124 252 0',
		'lemon chiffon' => '255 250 205',
		'light blue' => '173 216 230',
		'light coral' => '240 128 128',
		'light cyan' => '224 255 255',
		'light golden rod yellow' => '250 250 210',
		'light gray' => '211 211 211',
		'light grey' => '211 211 211',
		'light green' => '144 238 144',
		'light pink' => '255 182 193',
		'light salmon' => '255 160 122',
		'light sea green' => '32 178 170',
		'light sky blue' => '135 206 250',
		'light slate gray' => '119 136 153',
		'light steel blue' => '176 196 222',
		'light yellow' => '255 255 224',
		'lime' => '0 255 0',
		'lime green' => '50 205 50',
		'linen' => '250 240 230',
		'magenta' => '255 0 255',
		'maroon' => '128 0 0',
		'medium aqua marine' => '102 205 170',
		'medium blue' => '0 0 205',
		'medium orchid' => '186 85 211',
		'medium purple' => '147 112 219',
		'medium sea green' => '60 179 113',
		'medium slate blue' => '123 104 238',
		'medium spring green' => '0 250 154',
		'medium turquoise' => '72 209 204',
		'medium violet red' => '199 21 133',
		'midnight blue' => '25 25 112',
		'mint cream' => '245 255 250',
		'misty rose' => '255 228 225',
		'moccasin' => '255 228 181',
		'navajo white' => '255 222 173',
		'navy' => '0 0 128',
		'old lace' => '253 245 230',
		'olive' => '128 128 0',
		'olive drab' => '107 142 35',
		'orange' => '255 165 0',
		'orange red' => '255 69 0',
		'orchid' => '218 112 214',
		'pale golden rod' => '238 232 170',
		'pale green' => '152 251 152',
		'pale turquoise' => '175 238 238',
		'pale violet red' => '219 112 147',
		'papaya whip' => '255 239 213',
		'peach puff' => '255 218 185',
		'peru' => '205 133 63',
		'pink' => '255 192 203',
		'plum' => '221 160 221',
		'powder blue' => '176 224 230',
		'purple' => '128 0 128',
		'red' => '255 0 0',
		'rosy brown' => '188 143 143',
		'royal blue' => '65 105 225',
		'saddle brown' => '139 69 19',
		'salmon' => '250 128 114',
		'sandy brown' => '244 164 96',
		'sea green' => '46 139 87',
		'sea shell' => '255 245 238',
		'sienna' => '160 82 45',
		'silver' => '192 192 192',
		'sky blue' => '135 206 235',
		'slate blue' => '106 90 205',
		'slate gray' => '112 128 144',
		'snow' => '255 250 250',
		'spring green' => '0 255 127',
		'steel blue' => '70 130 180',
		'tan' => '210 180 140',
		'teal' => '0 128 128',
		'thistle' => '216 191 216',
		'tomato' => '255 99 71',
		'turquoise' => '64 224 208',
		'violet' => '238 130 238',
		'wheat' => '245 222 179',
		'white' => '255 255 255',
		'white smoke' => '245 245 245',
		'yellow' => '255 255 0',
		'yellow green' => '154 205 50'
	)
}

sub gcodes { ## NCBI Genetic codes
	%gcodes = (
		1 => { ## The Standard Code (transl_table=1)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => '*',   
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		2 => { ## The Vertebrate Mitochondrial Code (transl_table=2)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',  
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'M', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => '*',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => '*',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		3 => { ## The Yeast Mitochondrial Code (transl_table=3)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'T', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'T', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'T', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'T', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'M', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		4 => { ## The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code (transl_table=4)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',  
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',  
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',  
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',  
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',  
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',  
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',  
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',  
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',  
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',  
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',  
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',  
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',  
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',  
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',  
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G' 
		},
		5 => { ## The Invertebrate Mitochondrial Code (transl_table=5)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',  
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',  
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',  
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',  
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',  
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',  
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',  
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',  
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',  
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',  
			'ATA' => 'M', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'S',  
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'S',  
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',  
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',  
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',  
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'  
		},
		6 => { ## The Ciliate, Dasycladacean and Hexamita Nuclear Code (transl_table=6)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C', 
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C', 
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => 'Q', 'TGA' => '*', 
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'Q', 'TGG' => 'W', 
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R', 
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R', 
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R', 
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R', 
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S', 
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S', 
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R', 
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R', 
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G', 
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G', 
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G', 
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G' 
		},
		9 => { ## The Echinoderm and Flatworm Mitochondrial Code (transl_table=9)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',  
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',  
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',  
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',  
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',  
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',  
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',  
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',  
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',  
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',  
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'N', 'AGA' => 'S',  
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'S',  
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',  
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',  
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'  
		},
		10 => { ## The Euplotid Nuclear Code (transl_table=10)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'C',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		11 => { ## The Bacterial, Archaeal and Plant Plastid Code (transl_table=11)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',  
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',  
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => '*',  
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',  
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',  
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',  
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',  
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',  
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',  
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',  
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',  
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',  
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',  
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',  
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',  
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'  
		},
		12 => { ## The Alternative Yeast Nuclear Code (transl_table=12)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => '*',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'S', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		13 => { ## The Ascidian Mitochondrial Code (transl_table=13)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'M', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'G',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'G',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G',
		},
		14 => { ## The Alternative Flatworm Mitochondrial Code (transl_table=14)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => 'Y', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'N', 'AGA' => 'S',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'S',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G',
		},
		16 => { ## Chlorophycean Mitochondrial Code (transl_table=16)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => '*',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'L', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		21 => { ## Trematode Mitochondrial Code (transl_table=21)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',  
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',  
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',  
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',  
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',  
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',  
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',  
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',  
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',  
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',  
			'ATA' => 'M', 'ACA' => 'T', 'AAA' => 'N', 'AGA' => 'S',  
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'S',  
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',  
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',  
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',  
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'  
		},
		22 => { ## Scenedesmus obliquus Mitochondrial Code (transl_table=22)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',  
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',  
			'TTA' => 'L', 'TCA' => '*', 'TAA' => '*', 'TGA' => '*',  
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'L', 'TGG' => 'W',  
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',  
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',  
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',  
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',  
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',  
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',  
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',  
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',  
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',  
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',  
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',  
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'  
		},
		23 => { ## Thraustochytrium Mitochondrial Code (transl_table=23)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => '*', 'TCA' => 'S', 'TAA' => '*', 'TGA' => '*',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		24 => { ## Pterobranchia Mitochondrial Code (transl_table=24)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'S',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'K',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		25 => { ## Candidate Division SR1 and Gracilibacteria Code (transl_table=25)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => 'G',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		26 => { ## Pachysolen tannophilus Nuclear Code (transl_table=26)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => '*', 'TGA' => '*',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => '*', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'A', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		27 => { ## Karyorelict Nuclear (transl_table=27)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => 'Q', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'Q', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		28 => { ## Condylostoma Nuclear (transl_table=28)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => 'Q', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'Q', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		29 => { ## Mesodinium Nuclear (transl_table=29)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => 'Y', 'TGA' => '*',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'Y', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		30 => { ## Peritrich Nuclear (transl_table=30)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => 'E', 'TGA' => '*',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'E', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
		31 => { ## Blastocrithidia Nuclear (transl_table=31)
			'TTT' => 'F', 'TCT' => 'S', 'TAT' => 'Y', 'TGT' => 'C',
			'TTC' => 'F', 'TCC' => 'S', 'TAC' => 'Y', 'TGC' => 'C',
			'TTA' => 'L', 'TCA' => 'S', 'TAA' => 'E', 'TGA' => 'W',
			'TTG' => 'L', 'TCG' => 'S', 'TAG' => 'E', 'TGG' => 'W',
			'CTT' => 'L', 'CCT' => 'P', 'CAT' => 'H', 'CGT' => 'R',
			'CTC' => 'L', 'CCC' => 'P', 'CAC' => 'H', 'CGC' => 'R',
			'CTA' => 'L', 'CCA' => 'P', 'CAA' => 'Q', 'CGA' => 'R',
			'CTG' => 'L', 'CCG' => 'P', 'CAG' => 'Q', 'CGG' => 'R',
			'ATT' => 'I', 'ACT' => 'T', 'AAT' => 'N', 'AGT' => 'S',
			'ATC' => 'I', 'ACC' => 'T', 'AAC' => 'N', 'AGC' => 'S',
			'ATA' => 'I', 'ACA' => 'T', 'AAA' => 'K', 'AGA' => 'R',
			'ATG' => 'M', 'ACG' => 'T', 'AAG' => 'K', 'AGG' => 'R',
			'GTT' => 'V', 'GCT' => 'A', 'GAT' => 'D', 'GGT' => 'G',
			'GTC' => 'V', 'GCC' => 'A', 'GAC' => 'D', 'GGC' => 'G',
			'GTA' => 'V', 'GCA' => 'A', 'GAA' => 'E', 'GGA' => 'G',
			'GTG' => 'V', 'GCG' => 'A', 'GAG' => 'E', 'GGG' => 'G'
		},
	);
}
